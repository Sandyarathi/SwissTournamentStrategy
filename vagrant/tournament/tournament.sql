# Table definitions for the SwissTournament implementation
# @author = 'sandyarathi das'


# Deletion of pre-existing database and creation of new tournament db. 
DROP DATABASE IF EXISTS tournament;
CREATE DATABASE tournament;
\c tournament;


"""The 'registered_players' table holds id(player_id) and name(player_name) 
details of all registered players.The player_id field is an autogenerated 
erial value.
"""
CREATE TABLE registered_players(
player_id serial PRIMARY KEY,
player_name text,
wins int DEFAULT 0
);

"""The 'matches_info' table holds the information of players match records
	Auto generates a match id and stores the ids of the winner of the match and loser.
"""
CREATE TABLE matches_info(
    match_id SERIAL PRIMARY KEY,
    winner_id INTEGER REFERENCES registered_players(player_id) ON DELETE CASCADE,
    loser_id INTEGER REFERENCES registered_players(player_id) ON DELETE CASCADE,
    CHECK (winner_id <> loser_id)
);

"""The player_match_record view stores a view of a join on the registered_players
table and the matches info table, for easy querying on finding the players win record
and the finding the swiss pairs
"""

CREATE VIEW player_match_record
AS
	SELECT p.player_id, p.player_name, COUNT(m.*),p.wins
	FROM registered_players p
		LEFT OUTER JOIN matches_info m
		ON (p.player_id = m.winner_id OR p.player_id = m.loser_id)
	GROUP BY p.player_id
	ORDER BY wins DESC;



	


